#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
dados <- read.csv("C:/Users/Usuário/Downloads/dados.csv")
dados
regressao("quality", c("alcohol", "pH"), dados)
library(ggplot2)
regressao("quality", c("alcohol", "pH"), dados)
previsao <- function(X_novo){
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% {betas}
}
View(dados)
previsao(c(3,9))
previsao <- function(X_novo, betas){
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% betas
}
modelo <- regressao("quality", c("alcohol", "pH"), dados)
previsao(c(3,9), modelo)
previsao(c(3,9), modelo)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% modelo$betas
}
previsao(c(3,9), modelo)
modelo$Betas
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% modelo$Betas
}
previsao(c(3,9), modelo)
modelo$Betas
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% as.matrix(modelo$Betas)
}
previsao(c(3,9), modelo)
as.matrix(cbind(1, c(3,9)))
modelo$Betas
class(modelo$Betas)
modelo$Betas[-1,]
modelo$Betas[1,1]
modelo$Betas[1,]
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
}
previsao(c(3,9), modelo)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
return(previsao)
}
previsao(c(3,9), modelo)
c(3,9)%*%c(0.3285893, -0.1939640)
2.9949158 +c(3,9)%*%c(0.3285893, -0.1939640)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(X_novo)
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
return(previsao)
}
previsao(c(3,9), modelo)
modelo$Betas[-1,]
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return((Betas = betas,
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico)
}
regressao("quality", c("alcohol", "pH"), dados)
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
regressao("quality", c("alcohol", "pH"), dados)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
#X_novo <- as.matrix(X_novo)
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
return(previsao)
}
previsao(c(3,9), modelo)
previsao(c(c(3,9), c(2,8)), modelo)
previsao(c(2,8), modelo)
test_that("Matriz sem posto completo", {
devtools::load_all()
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
test_that("Matriz sem posto completo", {
devtools::load_all()
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
library(testthat)
test_that("Matriz sem posto completo", {
devtools::load_all()
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
library(ggplot2)
test_that("Matriz sem posto completo", {
devtools::load_all()
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
regressao("Y", "X", dados)
dados <- data.frame(Y = c(2, 4, 5, 7), X = c(4, 8, 10, 14))
regressao("Y", "X", dados)
lm(Y ~X, dados)
?lm
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 5, 7), X = c(4, 8, 10, 14))
expect_equal(regressao("Y", "X", dados), Betas[1, ] == 0)
})
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 5, 7), X = c(4, 8, 10, 14))
model <- regressao("Y", "X", dados)
expect_equal(model, model$Betas[1, ] == 0)
})
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 5, 7), X = c(4, 8, 10, 14))
model <- regressao("Y", "X", dados)
expect_equal(model$Betas[1,], 0)
})
model$Betas
model <- regressao("Y", "X", dados)
model$Betas
test_that("Overfitting dos dados no modelo", {
X <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
beta <- c(1, 2, 3)
Y <- X %*% beta
result <- regressao(X, Y)
expect_equal(result$residuals, rep(0, length(Y)), tolerance = 1e-10)  # Residuals should be all zero
})
matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
X <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
beta <- c(1, 2, 3)
Y <- X %*% beta
X
X <- matrix(c(1, 1, 1, 4, 5, 6), ncol = 2)
beta <- c(2, 3)
Y <- X %*% beta
dados <- data.frame(Y = Y, X = X)
dados
Y
regressao(X, Y, dados)
regressao("X", "Y", dados)
test_that("Overfitting dos dados no modelo", {
X <- matrix(c(1, 1, 1, 4, 5, 6), ncol = 2)
beta <- c(2, 3)
Y <- X %*% beta
dados <- data.frame(Y = Y, X = X)
result <- regressao("X", "Y", dados)
expect_equal(result$residuals, rep(0, length(Y)), tolerance = 1e-10)  # Residuals should be all zero
})
Y
data.frame(Y = c(14, 17, 20), X = X)
dados <- data.frame(Y = c(14, 17, 20), X = X)
regressao("X", "Y", dados)
data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
regressao("X", "Y", dados)
test_that("Overfitting dos dados no modelo", {
#X <- matrix(c(1, 1, 1, 4, 5, 6), ncol = 2)
#beta <- c(2, 3)
#Y <- X %*% beta
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
result <- regressao("X", "Y", dados)
expect_equal(result$residuals, rep(0, length(Y)), tolerance = 1e-10)  # Residuals should be all zero
})
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
result <- regressao("X", "Y", dados)
expect_equal(result$Residuos, rep(0, length(Y)), tolerance = 1e-10)  # Residuals should be all zero
})
regressao("X", "Y", dados)
result$Residuos
result <- regressao("X", "Y", dados)
result$Residuos
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
result <- regressao("X", "Y", dados)
expect_equal(result$Residuos, rep(0, length(Y)), tolerance = 1e-10)  # Residuals should be all zero
})
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 5, 7), X = c(4, 8, 10, 14))
model <- regressao("Y", "X", dados)
expect_equal(model$Betas[1,], 0)
})
as.vector(result$Residuos)
expect_equal(as.vector(result$Residuos),
rep(0, length(Y)), tolerance = 1e-10)
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
result <- regressao("X", "Y", dados)
expect_equal(as.vector(result$Residuos),
rep(0, length(Y)), tolerance = 1e-10)
})
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
result <- regressao("X", "Y", dados)
expect_equal(as.vector(result$Residuos),
rep(0, length(Y)), tolerance = 1e-10)
expect_equal(result$Betas[1,], !0)
})
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
result <- regressao("X", "Y", dados)
expect_equal(as.vector(result$Residuos),
rep(0, length(Y)), tolerance = 1e-10)
expect_false(result$Betas[1,], 0)
})
result$Betas[1,]
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
<- regressao("X", "Y", dados)
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
<- regressao("X", "Y", dados)
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
modelo <- regressao("X", "Y", dados)
expect_equal(as.vector(modelo$Residuos),
rep(0, length(Y)), tolerance = 1e-10)
expect_false(as.numeric(modelo$Betas[1,]), 0)
})
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
modelo <- regressao("X", "Y", dados)
expect_equal(as.vector(modelo$Residuos),
rep(0, length(Y)), tolerance = 1e-10)
})
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(3, 3, 3, 3))
regressao("Y", "X", dados)
lm(Y ~ X, dados)
dados <- data.frame(Y = c(2, 4, 6, 8), X1 = c(3, 3, 3, 3), X2 = c(3,6,10,13))
regressao("Y", c("X1", "X2"), dados)
data.frame(Y = c(2, 4, 6, 8), X1 = c(3, 3, 3, 3), X2 = c(3,6,10,13))
lm(Y ~ X1 + X2, dados)
regressao("Y", c("X1", "X2"), dados)
expect_error(regressao("Y", c("X1", "X2"), dados), "Singular")
test_that("Coluna constante na variável preditora", {
dados <- data.frame(Y = c(2, 4, 6, 8), X1 = c(3, 3, 3, 3), X2 = c(3,6,10,13))
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_error(regressao("Y", c("X1", "X2"), dados), "Singular")
})
test_that("Coluna constante na variável preditora", {
dados <- data.frame(Y = c(2, 4, 6, 8), X1 = c(3, 3, 3, 3), X2 = c(3,6,10,13))
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_type(regressao("Y", c("X1", "X2"), dados), NA)
})
test_that("Overfitting dos dados no modelo", {
dados <- data.frame(Y = c(14, 17, 20), X = c(4, 5, 6))
modelo <- regressao("X", "Y", dados)
expect_equal(as.vector(modelo$Residuos),
rep(0, length(Y)), tolerance = 1e-10)
})
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 5, 7), X = c(4, 8, 10, 14))
model <- regressao("Y", "X", dados)
expect_equal(model$Betas[1,], 0)
})
test_that("Coluna constante na variável preditora", {
dados <- data.frame(Y = c(2, 4, 6, 8), X1 = c(3, 3, 3, 3), X2 = c(3,6,10,13))
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_error(regressao("Y", c("X1", "X2"), dados))
})
test_that("Coluna constante na variável preditora", {
dados <- data.frame(Y = c(2, 4, 6, 8), X1 = c(3, 3, 3, 3), X2 = c(3,6,10,13))
expect_error(regressao("Y", c("X1", "X2"), dados))
})
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 5, 7), X = c(4, 8, 10, 14))
modelo <- regressao("Y", "X", dados)
expect_equal(modelo$Betas[1,], 0)
})
test_that("Valores grandes", {
dados <- data.frame(Y = c(2^10, 3^10, 4^10), X = c(8^10, 10^10, 14^10))
modelo <- regressao("Y", "X", dados)
expect_true(!is.null(modelo$Betas))
expect_true(all(!is.na(modelo$Betas)))
})
test_that("Valores grandes", {
dados <- data.frame(Y = c(2^10, 3^10, 4^10), X = c(8^10, 10^10, 14^10))
modelo <- regressao("Y", "X", dados)
expect_error(!is.null(modelo$Betas))
expect_error(all(!is.na(modelo$Betas)))
})
test_that("Valores grandes", {
dados <- data.frame(Y = c(2^10, 3^10, 4^10), X = c(8^10, 10^10, 14^10))
modelo <- regressao("Y", "X", dados)
expect_error(!is.null(modelo$Betas))
#expect_error(all(!is.na(modelo$Betas)))
})
expect_error(modelo)
test_that("Valores grandes", {
dados <- data.frame(Y = c(2^10, 3^10, 4^10), X = c(8^10, 10^10, 14^10))
modelo <- regressao("Y", "X", dados)
expect_error(modelo)
#expect_error(all(!is.na(modelo$Betas)))
})
test_that("Valores grandes", {
dados <- data.frame(Y = c(2^10, 3^10, 4^10), X = c(8^10, 10^10, 14^10))
#modelo <- regressao("Y", "X", dados)
expect_error(regressao("Y", "X", dados))
#expect_error(all(!is.na(modelo$Betas)))
})
devtools::load_all()
devtools::load_all()
?regressao::regressao
??regressao
devtools::load_all()
?regressao
install.packages("Roxygen")
install.packages("roxygen2")
library(roxygen2)
devtools::load_all()
?regressao
usethis::use_readme_rmd()
?regressao
??regressao
devtools::load_all()
?regressao
#' @title Predição de novos valores
#' @rdname predi
#'
#' @param X_novo Vetor com novos valores
#' @param modelo Objeto que contém o resultado da função de regressão do pacote `regressao`
#'
#' @return Vetor com os valores preditos pela função de regressão
#'
#' @examples
#' @export
predicao <- function(X_novo, modelo){
b <- modelo$Betas[-1,]
predicao <- modelo$Betas[1,] + X_novo %*% b
return(predicao)
}
#' @title Predição de novos valores
#' @rdname predicao
#'
#' @param X_novo Vetor com novos valores
#' @param modelo Objeto que contém o resultado da função de regressão do pacote `regressao`
#'
#' @return Vetor com os valores preditos pela função de regressão
#'
#' @examples
#' @export
predicao <- function(X_novo, modelo){
b <- modelo$Betas[-1,]
predicao <- modelo$Betas[1,] + X_novo %*% b
return(predicao)
}
getwd()
devtools::load_all()
devtools::load_all()
rm(list = c("predicao"))
devtools::document()
devtools::load_all()
devtools::load_all()
?regressao
?predicao
regressao("sim_Y", "sim_X", sim_dados)
library(ggplot2)
regressao("sim_Y", "sim_X", sim_dados)
regressao("sim_Y", "sim_X", sim_dados)
devtools::document()
devtools::document()
