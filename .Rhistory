colnames(dados) <- c("Y", 'X')
resultado <- regressao(X, Y)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
regressao(X, Y)
library(regressao)
test_that("Regression handles constant column in X", {
X <- matrix(1, ncol = 2, nrow = 4)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", 'X')
resultado <- regressao(X, Y)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
test_that("Coluna constante na variável preditora", {
X <- matrix(1, ncol = 2, nrow = 4)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", 'X')
resultado <- regressao(X, Y, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
X <- matrix(1, ncol = 2, nrow = 4)  # First column is constant
Y <- c(2, 4, 6, 8)
as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
dados
test_that("Coluna constante na variável preditora", {
X <- matrix(1, ncol = 2, nrow = 4)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "intercepto", "X")
resultado <- regressao(X, Y, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
test_that("Coluna constante na variável preditora", {
X <- matrix(1, ncol = 2, nrow = 4)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "intercepto", "X")
resultado <- regressao(Y, X, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
regressao(Y, X, dados)
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %% matX) %% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %% matX) %% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Coluna constante na variável preditora", {
X <- matrix(1, ncol = 2, nrow = 4)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "intercepto", "X")
resultado <- regressao(Y, X, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
test_that("Coluna constante na variável preditora", {
X <- c(1,1,1,1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao(Y, X, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
test_that("Coluna constante na variável preditora", {
X <- c(1,1,1,1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao(Y, X, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
dados
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %% matX) %% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Coluna constante na variável preditora", {
X <- c(1,1,1,1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao(Y, X, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
str(dados)
resultado <- regressao(Y, X, dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao("Y", "X", dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
:drop_na
?drop_na
??drop_na
usethis::use_package(tidyr)
usethis::use_package("tidyr")
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao("Y", "X", dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %% matX) %% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %% matX) %% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao("Y", "X", dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)  # First column is constant
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao("Y", "X", dados)
expect_true(!is.null(resultado$betas))  # Coefficients should still be produced
expect_true(all(!is.na(resultado$betas)))  # No coefficients should be NA
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao("Y", "X", dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultado <- regressao("Y", "X", dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_error(regressao("Y", "X", dados))
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 1, 1, 1)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_error(regressao("Y", "X", dados))
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(regressao("Y", "X", dados), lm(Y ~ X, dados))
})
lm(Y ~ X, dados)
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
lm(Y ~ X, dados)
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$Coefficients)
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$coefficients)
})
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
regressao("Y", "X", dados)
dados
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot2::ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$coefficients)
})
