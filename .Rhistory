dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(regressao("Y", "X", dados), lm(Y ~ X, dados))
})
lm(Y ~ X, dados)
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
lm(Y ~ X, dados)
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$Coefficients)
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$coefficients)
})
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
regressao("Y", "X", dados)
dados
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot2::ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$coefficients)
})
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot2::ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$coefficients)
})
library(testthat)
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$coefficients)
})
test_that("Regression handles non-full rank matrix", {
X <- matrix(c(1, 2, 3, 4, 2, 4, 6, 8), ncol = 2)  # Second column is a multiple of the first
Y <- c(2, 4, 6, 8)
expect_error(my_regression(X, Y), "singular")  # Expect an error due to singular matrix
})
?data.frame
data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
test_that("Regression handles non-full rank matrix", {
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")  # Expect an error due to singular matrix
})
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
test_that("Regression handles non-full rank matrix", {
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")  # Expect an error due to singular matrix
})
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
devtools::load_all()
test_that("Matriz sem posto completo", {
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
test_that("Coluna constante na variável preditora", {
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 1, 1, 1))
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_error(regressao("Y", "X", dados))
})
test_that("Coluna constante na variável preditora", {
X <- c(1, 4, 7, 6)
Y <- c(2, 4, 6, 8)
dados <- as.data.frame(cbind(Y, X))
colnames(dados) <- c("Y", "X")
resultados <- regressao("Y", "X", dados)
lm <- lm(Y ~ X, dados)
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_equal(resultados$betas, lm$coefficients)
})
test_that("Coluna constante na variável preditora", {
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 1, 1, 1))
#expect_true(!is.null(resultado$betas))
#expect_true(all(!is.na(resultado$betas)))
expect_error(regressao("Y", "X", dados))
})
test_that("Matriz sem posto completo", {
devtools::load_all()
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
devtools::load_all()
devtools::test()
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
dados <- read.csv("C:/Users/Usuário/Downloads/dados.csv")
dados
regressao("quality", c("alcohol", "pH"), dados)
library(ggplot2)
regressao("quality", c("alcohol", "pH"), dados)
previsao <- function(X_novo){
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% {betas}
}
View(dados)
previsao(c(3,9))
previsao <- function(X_novo, betas){
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% betas
}
modelo <- regressao("quality", c("alcohol", "pH"), dados)
previsao(c(3,9), modelo)
previsao(c(3,9), modelo)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% modelo$betas
}
previsao(c(3,9), modelo)
modelo$Betas
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% modelo$Betas
}
previsao(c(3,9), modelo)
modelo$Betas
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
previsao <- X_novo %*% as.matrix(modelo$Betas)
}
previsao(c(3,9), modelo)
as.matrix(cbind(1, c(3,9)))
modelo$Betas
class(modelo$Betas)
modelo$Betas[-1,]
modelo$Betas[1,1]
modelo$Betas[1,]
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
}
previsao(c(3,9), modelo)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(cbind(1, X_novo))
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
return(previsao)
}
previsao(c(3,9), modelo)
c(3,9)%*%c(0.3285893, -0.1939640)
2.9949158 +c(3,9)%*%c(0.3285893, -0.1939640)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
X_novo <- as.matrix(X_novo)
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
return(previsao)
}
previsao(c(3,9), modelo)
modelo$Betas[-1,]
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return((Betas = betas,
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico)
}
regressao("quality", c("alcohol", "pH"), dados)
#'
#' @param Y
#' @param X
#' @param db
#'
#' @return
#'
#' @export
#'
#' @examples
regressao <- function(Y, X, db){
variaveis_numericas<-(sapply(db[c(X,Y)], is.numeric))
if (all(variaveis_numericas) == FALSE) {
false <- names(variaveis_numericas[!variaveis_numericas])
stop(paste("Erro: As seguintes variáveis preditoras não são numéricas:",
paste(false, collapse = ", ")))
} else{
db <- tidyr::drop_na(db)
Y <- as.matrix(db[Y])
X <- as.matrix(db[X])
matX <- cbind(1, X)
betas <- solve(t(matX) %*% matX) %*% (t(matX) %*% Y)
preditos <- matX %*% betas
residuos <- Y - preditos
dataf <- as.data.frame(cbind(Y, preditos))
colnames(dataf) <- c("Observados", "Preditos")
grafico <- ggplot(dataf, aes(x = Preditos, y = Observados)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Valores Preditos vs Observados",
x = "Valores Preditos",
y = "Valores Observados") +
theme_bw()
}
return(list(Betas = betas,
Valores_preditos = preditos,
Residuos = residuos,
Grafico = grafico))
}
regressao("quality", c("alcohol", "pH"), dados)
previsao <- function(X_novo, modelo){ #colocar na documentação que a pessoa precisa salvar o modelo em algum lugar e depois colocar o nome aqui para fazer previsão
#X_novo <- as.matrix(X_novo)
b <- modelo$Betas[-1,]
previsao <- modelo$Betas[1,] + X_novo %*% b
return(previsao)
}
previsao(c(3,9), modelo)
previsao(c(c(3,9), c(2,8)), modelo)
previsao(c(2,8), modelo)
test_that("Matriz sem posto completo", {
devtools::load_all()
dados <- data.frame(Y = c(2, 4, 6, 8), X = c(1, 2, 3, 4))
expect_error(regressao("Y", "X", dados), "singular")
})
